- Listening for OSC cxns
- OSC definition, parsing, generation
- BCR preset mgmt
- Reaper OSC def
- Run as Windows service

Necessary:

- Encapsulate OSC I/O into Stream/Sink based on rosc.
  - Mainly for symmetry. Worthwhile?
- Implement bidirectional OSC/MIDI mapping.
- Parse BCL to determine device configuration, generate MIDI-OSC mappings.
- Figure out how to store/load MIDI-OSC mappings.

Architecture:

- MIDI->OSC and OSC->MIDI apps already exist. Should we leverage that, or at
least breaks ours out as an app separate from BC utilities? Probably.

Useful:
- Read/write config file.
- Service mode for Windows.
- Support multiple MIDI input and output ports.

Would be nice:
- Profile performance.
  - If warranted, consider other strategies for data flow.
  - Example: Task per target client.
  - Example: UDP socket per target client.
- Security? This is really mainly for use on a safe network.
- Dynamic client configuration
  - Can we auto-discover clients?
- Break parts out as library crates:
  - BCL/B-Code parser(s)
  - Runtime-agnostic OSC IO wrappers.
  - Runtime-agnostic MIDI IO wrappers (possibly as an enhancement to midir).
- Figure out how different presets can be used.
  - Maybe preset # should be represented in OSC addresses.
  - Would have to track controller's curent preset. B-Controls do not announce
    preset changes.
  - Not clear how this would interact with the "scratch" preset.
- Maybe simplify MidiSink implementation?
- Check for blocking I/O in MidiSink?
